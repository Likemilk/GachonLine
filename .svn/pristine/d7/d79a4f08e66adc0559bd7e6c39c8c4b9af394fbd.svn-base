package com.myspring.gachon.community.dao;

import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.myspring.gachon.admin.course.dao.AdminCourseDAOImpl;
import com.myspring.gachon.community.vo.CommunityNormalContentVO;
import com.myspring.gachon.community.vo.CommunityNormalListVO;
import com.myspring.gachon.content.ContentKey;
import com.myspring.gachon.course.vo.ChangeCourseVO;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Repository
public class CommunityDAOImpl implements CommunityDAO{
	
	@Autowired
	private SqlSession sqlSession;
	// end must be point .

	private static final String NS = "mapper.com.myspring.gachon.community.";
	@Autowired
	PlatformTransactionManager platformTransactionManager;
	
	@Override
	public JSONArray getBoardList(String divs) {
		// TODO Auto-generated method stub
	
		
		return null;
	}

	@Override
	public JSONObject setWriteSubmit(CommunityNormalListVO list,CommunityNormalContentVO content) {
		// TODO Auto-generated method stub
		JSONObject result = new JSONObject();

		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
		def.setName(CommunityDAOImpl.class.getName());
		def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
		TransactionStatus status = platformTransactionManager.getTransaction(def);
		try {
			if(sqlSession.insert(NS+"writeSubmitList",list)!=1){
				throw new Exception("COMMU_NORMAL_CONTENT 삽입 실패");
			}
			if(sqlSession.insert(NS+"writeSubmitContent",content)!=1){
				throw new Exception("COMMU_NORMAL_CONTENT 삽입 실패");
			}
		}
		catch (Exception ex) {
			platformTransactionManager.rollback(status);
			//ex.printStackTrace();
			result.put(ContentKey.RESULT_MSG, ContentKey.RESULT_FAIL);
			return result;			
		}
		platformTransactionManager.commit(status);
		result.put(ContentKey.RESULT_MSG, ContentKey.RESULT_SUCCESS);
		return result;
	}
	
}
